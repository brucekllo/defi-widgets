{"version":3,"file":"swap-token-list.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import axios from 'axios';\nimport _ from 'lodash';\nimport validator from 'validator';\n\ninterface ResultType {\n  success: boolean;\n  msg?: string;\n  data?: any;\n}\n\nexport class TokenList {\n  private TOKENS_ELEMENT = {\n    chainId: '',\n    address: '',\n    name: '',\n    symbol: '',\n    decimals: '',\n    logoURI: ''\n  };\n\n  private JSON_ELEMENT = {\n    'name': '',\n    'logoURI': '',\n    'timestamp': '',\n    'tokens': [],\n    'version': {\n      'major': '',\n      'minor': '',\n      'patch': ''\n    }\n  };\n\n  private errorMessage = (msg: string) => {\n    const error: ResultType = { success: false, msg };\n    return error;\n  };\n\n  private successData = (data?: any) => {\n    const result: ResultType = { success: true, data };\n    return result;\n  };\n\n  private getVersion = (v: { major?: 0 | undefined; minor?: 0 | undefined; patch?: 0 | undefined; }) => {\n    try {\n      const { major = 0, minor = 0, patch = 0 } = v;\n      return String(major) + '.' + String(minor) + '.' + String(patch);\n    } catch (err) {\n      console.log(err);\n      return '';\n    }\n  };\n\n  private checkVersionLater = (o: any, n: any) => {\n    try {\n      if (Number(n.major) > Number(o.major)) {\n        return true;\n      }\n      if (Number(n.minor) > Number(o.minor)) {\n        return true;\n      }\n      if (Number(n.patch) > Number(o.patch)) {\n        return true;\n      }\n      return false;\n    } catch (err) {\n      console.log(err);\n      return false;\n    }\n  };\n\n  private checkTokenChanged = (o: any, n: any, maxTokens = 100) => {\n    try {\n      const res = {\n        success: false,\n        addTokens: [],\n        delTokens: [],\n        updateTokens: []\n      };\n      const oVersion = o.version;\n      const nVersion = n.version;\n      const isVersionLater = this.checkVersionLater(oVersion, nVersion);\n      if (!isVersionLater) {\n        return res;\n      }\n      // If the number of tokens exceeds 100, no prompt will be given\n      if (n.tokens.length > maxTokens) {\n        return res;\n      }\n      const oTokens = o.tokens.slice() || [];\n      const delTokensInit = o.tokens.slice() || [];\n      const nTokens = n.tokens.slice() || [];\n      const addTokensInit = n.tokens.slice() || [];\n      _.pullAllWith(delTokensInit, nTokens, _.isEqual);\n      _.pullAllWith(addTokensInit, oTokens, _.isEqual);\n      const updateTokens = _.intersectionBy(addTokensInit, delTokensInit, 'address');\n      const addTokens = _.xorBy(addTokensInit, updateTokens, 'address');\n      const delTokens = _.xorBy(delTokensInit, updateTokens, 'address');\n      if (addTokens.length || delTokens.length || updateTokens.length) {\n        return {\n          success: true,\n          addTokens,\n          delTokens,\n          updateTokens\n        };\n      }\n      return res;\n    } catch (err) {\n      return {\n        success: false\n      };\n    }\n  };\n\n  private handleNotifiction = async (listsData: { byUrl: any; selectedListUrl: any; }, byUrlNew: { [x: string]: any; }) => {\n    try {\n      const updateStatus = Object.keys(byUrlNew).length > 0;\n      if (!updateStatus) {\n        return this.errorMessage(`error: No listings have updated content`);\n      }\n      const { byUrl, selectedListUrl } = listsData;\n      const o = byUrl[selectedListUrl];\n      const n = byUrlNew[selectedListUrl];\n      const oVersion = o.version;\n      const nVersion = n.version;\n      const { success = false, addTokens, delTokens, updateTokens } = this.checkTokenChanged(o, n);\n      let updateInfo = {};\n      if (success) {\n        updateInfo = {\n          addTokens,\n          delTokens,\n          updateTokens,\n          versionOld: this.getVersion(oVersion),\n          versionNew: this.getVersion(nVersion),\n          categoryName: o.name,\n        };\n      }\n      return this.successData(updateInfo);\n    } catch (err) {\n      console.log(err);\n      return this.errorMessage(`error: ${err}`);\n    }\n  };\n\n  private isValidURL = (url: string) => {\n    if (typeof url !== 'string') return false;\n    return validator.isURL(url.toString(), {\n      protocols: ['http', 'https'],\n      require_tld: true,\n      require_protocol: true\n    });\n  };\n\n  private isListsOver = (lists = {}, maxLists = 20) => {\n    return Object.keys(lists).length >= maxLists;\n  };\n\n  private isNotEmptyString = (str: string, tronweb = null) => {\n    const tronWeb = tronweb || (window as any).tronWeb;\n    return tronWeb.utils.isString(str) && str != '';\n  };\n\n  private isPositiveInteger = (num: number, allowZero = false, tronweb = null) => {\n    const tronWeb = tronweb || (window as any).tronWeb;\n    const numStatus = allowZero ? num >= 0 : num > 0;\n    return typeof num === 'number' && tronWeb.utils.isInteger(num) && numStatus;\n  };\n\n  private isTimestamp = (timestamp: number) => {\n    return this.isPositiveInteger(timestamp) && String(timestamp).length === 13;\n  };\n\n  private hasSpace = (str: string) => {\n    var reg = /(^\\s+)|(\\s+$)|\\s+/g;\n\n    return reg.test(str);\n  };\n\n  private tokensElementValidate: any = {\n    chainId: (chainId: number) => {\n      return this.isPositiveInteger(chainId) && chainId >= 1 && chainId <= 10; // Chainid ï¼šIt needs to be a number, between 1-10;\n    },\n    address: (address: any, tronweb = null) => {\n      const tronWeb = tronweb || (window as any).tronWeb;\n      return tronWeb.isAddress(address);\n    },\n    name: (name: string) => {\n      return this.isNotEmptyString(name);\n    },\n    symbol: (symbol: string) => {\n      return this.isNotEmptyString(symbol) && !this.hasSpace(symbol);\n    },\n    decimals: (decimals: number) => {\n      return this.isPositiveInteger(decimals) && decimals <= 256;\n    },\n    logoURI: (logoURI: string) => {\n      return this.isValidURL(logoURI);\n    }\n  };\n\n  private tokensValidate = (tokens: string | any[], tronweb = null) => {\n      const tronWeb = tronweb || (window as any).tronWeb;\n      if (!tronWeb.utils.isArray(tokens) || tokens.length === 0) {\n      return false;\n    }\n    let flag = true;\n    const len1 = tokens.length;\n    for (let j = 0; j < len1; j++) {\n      const t = tokens[j];\n      const element = Object.assign({ ...this.TOKENS_ELEMENT }, t);\n      const elementArr = Object.keys(element);\n      const length = elementArr.length;\n      for (let i = 0; i < length; i++) {\n        const key = elementArr[i];\n        const e = element[key];\n        if ((this.tokensElementValidate[key] && !this.tokensElementValidate[key](e)) || !this.tokensElementValidate[key]) {\n          flag = false;\n          break;\n        }\n      }\n      if (!flag) {\n        break;\n      }\n    }\n    return flag;\n  };\n\n  private jsonValidate: any = {\n    name: (name: any) => {\n      return this.isNotEmptyString(name);\n    },\n    logoURI: (logoURI: string) => {\n      return this.isValidURL(logoURI);\n    },\n    timestamp: (timestamp: any) => {\n      return this.isTimestamp(timestamp);\n    },\n    tokens: (tokens: any) => {\n      return this.tokensValidate(tokens);\n    },\n    version: (_version: { major: any; minor: any; patch: any; }, tronweb = null) => {\n      const tronWeb = tronweb || (window as any).tronWeb;\n      return (\n        tronWeb.utils.isObject(_version) &&\n        this.isPositiveInteger(_version.major, true) &&\n        this.isPositiveInteger(_version.minor, true) &&\n        this.isPositiveInteger(_version.patch, true)\n      );\n    }\n  };\n\n  private validateFunc = (target: any) => {\n    const json = Object.assign({ ...this.JSON_ELEMENT }, target);\n\n    const keysArr = Object.keys(json);\n    const length = keysArr.length;\n    const res = { key: '', valid: true };\n    for (let i = 0; i < length; i++) {\n      const key = keysArr[i];\n      if ((this.jsonValidate[key] && !this.jsonValidate[key](json[key])) || (!this.jsonValidate[key] && key !== 'uri')) {\n        // uri is added manually, without verification\n        res.key = key;\n        res.valid = false;\n        break;\n      }\n    }\n    return res;\n  };\n\n  private setTokensDataIntoLocal = (listsData: any) => {\n    try {\n      window.localStorage.setItem('simpleListsFromTron', JSON.stringify(listsData));\n      return window.localStorage.getItem('simpleListsFromTron');\n    } catch (err) {\n      return false;\n    }\n  };\n\n  private getDefaultListSet = async () => {\n    const res = await axios.get(`https://abc.ablesdxd.link/swap/v2/defaultListSet`);\n    if (res.data.code === 0) {\n      return res.data.data.filter((item: any) => item.type !== 'list');\n    } else {\n      return [];\n    }\n  }\n\n  // Get tokens data from backend\n  getTokenListFromUri = async (uri: string) => {\n    try {\n      const res = await axios.get(uri);\n      const obj = res && res.data ? res.data : null;\n      if (typeof obj !== 'object' || obj === null) {\n        return this.errorMessage(`error: No data`);\n      }\n      return this.successData({ ...res.data, uri });\n    } catch (err) {\n      console.log(err);\n      return this.errorMessage(`error: ${err}`);\n    }\n  };\n\n  // Add tokenlist\n  addTokenList = async (customTokenUri: string, maxLists = 20, maxTokens = 100) => {\n    try {\n      const simpleListsFromTronStr = window.localStorage.getItem('simpleListsFromTron') || '';\n      const simpleListsFromTron = simpleListsFromTronStr ? JSON.parse(simpleListsFromTronStr) : {};\n      const { byUrl = {} } = simpleListsFromTron;\n      // The address is invalid\n      if (!this.isValidURL(customTokenUri)) {\n        return this.errorMessage(`error: The list cannot be added`);\n      }\n\n      // exists in the list\n      if (byUrl[customTokenUri] && !byUrl[customTokenUri].rs) {\n        // not deleted\n        return this.errorMessage(`error: Already exists in the list`);\n      }\n\n      // Whether the number of lists exceeds 20\n      if (this.isListsOver(byUrl)) {\n        return this.errorMessage(`error: You have more than ${maxLists} lists.The list cannot be added`);\n      }\n      \n      return this.updateTokenList(customTokenUri, maxTokens);\n    } catch (err) {\n      // The request returns an error code\n      console.log(err);\n      return this.errorMessage(`error: Adding failed, please try again. ${err}`);\n    }\n  };\n\n  // Add default tokenlist\n  addDefaultTokenList = async () => {\n    return this.addTokenList(`https://list.justswap.link/justswap.json`);\n  };\n\n  // Get tokens data from local cache\n  getTokenListFromLocal = () => {\n    try {\n      if (!window.localStorage.getItem('simpleListsFromTron')) return { byUrl: {} };\n      const simpleListsFromTronStr = window.localStorage.getItem('simpleListsFromTron') || '';\n      if (!simpleListsFromTronStr) {\n        return this.errorMessage(`error: TokenList does not exist`);\n      }\n      const simpleListsFromTron = JSON.parse(simpleListsFromTronStr);\n      const { byUrl = {}, selectedListUrl = '' } = simpleListsFromTron;\n      const keyArr = Object.keys(byUrl);\n      let res: any = {};\n      keyArr.map((item: any) => {\n        if (byUrl[item].name !== 'JustSwap Default List') {\n          res[item] = byUrl[item];\n        }\n      });\n      let listsData: any = {};\n      listsData.byUrl = res;\n\n      if (!res[selectedListUrl]) {\n        listsData.selectedListUrl = keyArr[0];\n      } else {\n        listsData.selectedListUrl = selectedListUrl;\n      }\n      return this.successData(listsData);\n    } catch (err) {\n      console.log(err);\n      return this.errorMessage(`error: ${err}`);\n    }\n  };\n\n  // Get list data update information\n  getUpdateInfo = async ({ maxLists = 20 } = {}) => {\n    try {\n      const tokens = await this.getDefaultListSet();\n      // You need to get all the latest data, and compare it with the local cached version. If there is a version update, the information will be returned\n      let listsData: any = {};\n      let localRes: any = this.getTokenListFromLocal();\n      if (localRes?.success) listsData = localRes.data;\n      const jsonPromises: any[] = [];\n      tokens.map((item: any) => {\n        item.uri = item.uri.trim();\n        const res: any = this.getTokenListFromUri(item.uri);\n        if (res.success) jsonPromises.push(res.data);\n      });\n      let res = await Promise.all(jsonPromises);\n      const resObj: any = {};\n      res.map(r => {\n        resObj[r.uri] = { ...r };\n      });\n      const byUrlNew = resObj;\n      tokens.map((item: any, i: number) => {\n        const uri = item.uri;\n        if (resObj[uri] && !listsData.byUrl[uri]) {\n          // If there is no local cache, it is directly added, that is, the newly added list has no update prompt.\n          if (Object.keys(listsData.byUrl).length < maxLists) {\n            listsData.byUrl[uri] = { ...item, ...resObj[uri] };\n            if (!listsData.selectedListUrl && Number(item.defaultList) === 1) {\n              listsData.selectedListUrl = uri;\n            }\n          }\n        }\n        if (i === tokens.length - 1) {\n          this.setTokensDataIntoLocal(listsData);\n        }\n      });\n      return this.handleNotifiction(listsData, byUrlNew);\n    } catch (err) {\n      console.log(err);\n      return this.errorMessage(`error: ${err}`);\n    }\n  };\n\n  // Update list data\n  updateTokenList = async (selectedListUrl: string, maxTokens = 100) => {\n    try { \n      const res: any = await this.getTokenListFromUri(selectedListUrl);\n      let jsonData: any = {};\n      if (res.success) jsonData = res.data;\n      const { tokens = [] } = jsonData;\n\n      // Whether the number of tokens in the list exceeds 100\n      if (tokens.length > maxTokens) {\n        return this.errorMessage(`error: The number of tokens in the list exceeds ${maxTokens}.The list cannot be added`);\n      }\n  \n      const { key = '', valid = false } = this.validateFunc(jsonData);\n\n      // JSON data field validation\n      if (!valid) {\n        return this.errorMessage(`error: Invalid ${key}. The list cannot be added`);\n      }\n\n      jsonData = { ...jsonData, uri: selectedListUrl, rs: 0 };\n\n      let listsData: any = { selectedListUrl: '', byUrl: {} };\n      let localRes: any = this.getTokenListFromLocal();\n      if (localRes?.success) listsData = localRes.data;\n      listsData.selectedListUrl = selectedListUrl;\n      jsonData.tm = Date.now();\n      listsData.byUrl[selectedListUrl] = jsonData;\n\n      this.setTokensDataIntoLocal(listsData);\n      return this.successData(listsData);\n    } catch (err) {\n      console.log(err);\n      return this.errorMessage(`error: ${err}`);\n    }\n  };\n\n  // Delete custom list\n  deleteTokenList = (uri: string | number) => {\n    let listsData: any = {};\n    let localRes: any = this.getTokenListFromLocal();\n    if (localRes?.success) listsData = localRes.data;\n    if (listsData?.byUrl[uri]) {\n      delete listsData.byUrl[uri];\n    } else {\n      return this.errorMessage(`error: The specified tokenlist does not exist or has been deleted`);\n    }\n    const res: any = this.setTokensDataIntoLocal(listsData);\n    if (res?.byUrl?.uri) {\n      return this.errorMessage(`error: Delete specified tokenlist error`);\n    } else {\n      return this.successData();\n    }\n  };\n}\n\nexport const TokenListProvider = new TokenList();\n"],"names":["TokenList","this","chainId","address","name","symbol","decimals","logoURI","timestamp","tokens","version","major","minor","patch","msg","success","data","v","String","err","console","log","o","n","Number","maxTokens","res","addTokens","delTokens","updateTokens","_this","checkVersionLater","length","oTokens","slice","delTokensInit","nTokens","addTokensInit","_","pullAllWith","isEqual","intersectionBy","xorBy","listsData","byUrlNew","_context","Object","keys","errorMessage","oVersion","byUrl","selectedListUrl","nVersion","_this$checkTokenChang","checkTokenChanged","updateInfo","versionOld","getVersion","versionNew","categoryName","successData","url","validator","isURL","toString","protocols","require_tld","require_protocol","lists","maxLists","str","tronweb","window","tronWeb","utils","isString","num","allowZero","numStatus","isInteger","isPositiveInteger","test","isAddress","isNotEmptyString","hasSpace","isValidURL","isArray","flag","len1","j","t","element","assign","TOKENS_ELEMENT","elementArr","i","key","tokensElementValidate","isTimestamp","tokensValidate","_version","isObject","target","json","JSON_ELEMENT","keysArr","valid","jsonValidate","localStorage","setItem","JSON","stringify","getItem","_context2","axios","get","code","filter","item","type","uri","_context3","obj","customTokenUri","_context4","simpleListsFromTronStr","simpleListsFromTron","parse","_simpleListsFromTron$","rs","isListsOver","updateTokenList","addTokenList","keyArr","map","_context6","getDefaultListSet","localRes","getTokenListFromLocal","jsonPromises","trim","getTokenListFromUri","push","Promise","all","resObj","r","defaultList","setTokensDataIntoLocal","handleNotifiction","_context7","jsonData","_this$validateFunc","validateFunc","tm","Date","now","_listsData","_res$byUrl","TokenListProvider"],"mappings":"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"}